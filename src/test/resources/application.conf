#authomatically overides src/application.conf
service: "seecommerce"

ask.timeout = 60s


akka {
  persistence {
    journal {
      auto-start-journals = [""]
      plugin = inmemory-journal
    }

    snapshot-store {
      plugin = inmemory-snapshot-store
    }
  }

  provider = cluster

  allow-java-serialization = off
  serializers.proto = "akka.remote.serialization.ProtobufSerializer"
  serialization-bindings {
    "java.io.serializable" = none
    "scalapb.GeneratedMessage" = proto
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
    log-remote-lifecycle-events = DEBUG
  }

  cluster {
    seed-nodes = ["akka.tcp://"${service}"@"${akka.remote.netty.tcp.hostname}":"${akka.remote.netty.tcp.port}]
    failure-detector {
      acceptable-heartbeat-pause = 1 second
      hearbeat-interval = 250 milliseconds
      threshold = 4.0
    }
    sharding {
      remember-entities = off
      updating-state-timeout = 10s
    }
  }
}


inmemory-read-journal {
  # Absolute path to the write journal plugin configuration section to get the event adapters from
  write-plugin = "inmemory-journal"

  # there are two modes; sequence or uuid. If set to "sequence" and NoOffset will be requested, then
  # the query will return Sequence offset types. If set to "uuid" and NoOffset will be requested, then
  # the query will return Offset offset types. When the query is called with Sequence then
  # the query will return Sequence offset types and if the query is called with TimeBasedUUID types then
  # the query will return TimeBasedUUID offset types.
  offset-mode = "sequence"

  # ask timeout on Futures
  ask-timeout = "10s"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "100ms"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "5000"
}

inmemory-journal {
  circuit-breaker {
    max-failures = 10
    call-timeout = 600s
    reset-timeout = 30s
  }
}

elastic {
  host: "host"
  user: "user"
  password: "password"
  shards: 5
  replicas: 2
}

cassandra-snapshot-store {
  # Comma-separated list of contact points in the cluster.
  contact-points = [""]
  port = ""
}

cassandra-journal {
  # Comma-separated list of contact points in the cluster.
  contact-points = [""]
  port = ""
}