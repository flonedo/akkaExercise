env: "local"
service: "akka-exercise"

ask.timeout = 25s

custom-downing {
  stable-after = 20s

  oldest-auto-downing {
    oldest-member-role = ""
    down-if-alone = true
  }
}

akka {
  jvm-exit-on-fatal-error = false
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  loglevel = "DEBUG"
  log-config-on-start = "off"
  log-dead-letters = 100
  log-dead-letters-during-shutdown = off

  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      unhandled = on
    }
    // cluster
    provider = cluster
    // persistence
    extensions = [akka.persistence.Persistence, akka.cluster.metrics.ClusterMetricsExtension]
    // serialization
    allow-java-serialization = off
    serializers.proto = "akka.remote.serialization.ProtobufSerializer"
    serialization-bindings {
      "java.io.serializable" = none
      "scalapb.GeneratedMessage" = proto
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      # hostname = "127.0.0.1"
      # hostname = ${?HOSTNAME}
      port = 2551
      # bind-hostname = 0.0.0.0
      # bind-port = 2551
    }
    log-remote-lifecycle-events = DEBUG
  }

  cluster {
    failure-detector {
      acceptable-heartbeat-pause = 20s
      hearbeat-interval = 2s
      threshold = 10.0
    }
    sharding {
      remember-entities = on
      updating-state-timeout = 10s
      state-store-mode = persistence
    }
    downing-provider-class = "tanukki.akka.cluster.autodown.OldestAutoDowning"
  }

  persistence {
    journal {
      auto-start-journals = [""]
      plugin = cassandra-journal
    }

    snapshot-store {
      plugin = cassandra-snapshot-store
    }
  }

cassandra-journal {
  # Comma-separated list of contact points in the cluster.
  # Replication factor to use when creating a keyspace. Is only used when replication-strategy is SimpleStrategy.
  replication-factor = 2
  # Write consistency level
  write-consistency = "QUORUM"
  # Read consistency level
  read-consistency = "QUORUM"

  contact-points = ["ec2-34-247-62-168.eu-west-1.compute.amazonaws.com"]
  port = 9042

  keyspace = ${env}"_"${service}"_akka_journal"

  event-adapters {
    configuration = "it.warda.seecommerce.actor.adapter.ConfigurationAdapter"
    product = "it.warda.seecommerce.actor.adapter.ProductDetailsAdapter"
    broker = "it.warda.seecommerce.actor.adapter.BrokerAdapter"
    stagingArea = "it.warda.seecommerce.actor.adapter.StagingAreaAdapter"
    guaranteedDelivery = "it.warda.seecommerce.actor.adapter.GuaranteedDeliveryAdapter"
  }

  event-adapter-bindings {
    # at least once delivery events
    "it.warda.seecommerce.actor.GuaranteedDelivery$MessageSent" = guaranteedDelivery
    "it.warda.seecommerce.actor.GuaranteedDelivery$MessageConfirmed" = guaranteedDelivery

    #  configuration events
    "it.warda.seecommerce.domain.model.Configuration$ConfigurationCreated" = configuration
    "it.warda.seecommerce.domain.model.Configuration$NameUpdated" = configuration
    "it.warda.seecommerce.domain.model.Configuration$TermsModified" = configuration
    "it.warda.seecommerce.domain.model.Configuration$CatalogCreated" = configuration
    "it.warda.seecommerce.domain.model.Configuration$AttributesModified" = configuration
    "it.warda.seecommerce.domain.model.Configuration$BusinessKeysModified" = configuration
    "it.warda.seecommerce.domain.model.Configuration$RulesModified" = configuration
    "it.warda.seecommerce.domain.model.Configuration$CatalogAltered" = configuration
    "it.warda.seecommerce.domain.model.Configuration$CatalogLanguagesModified" = configuration

    #  product events
    "it.warda.seecommerce.domain.model.Product$ProductDetailsDisabled" = product
    "it.warda.seecommerce.domain.model.Product$DataUpserted" = product
    "it.warda.seecommerce.domain.model.Product$MediaContentUpserted" = product
    "it.warda.seecommerce.domain.model.Product$MediaContentDeleted" = product
    "it.warda.seecommerce.domain.model.Product$ApprovalAdded" = product
    "it.warda.seecommerce.domain.model.Product$ApprovalDeleted" = product
    "it.warda.seecommerce.domain.model.Product$ReadyForPublicationAdded" = product
    "it.warda.seecommerce.domain.model.Product$ConfirmedPublicationAdded" = product
    "it.warda.seecommerce.domain.model.Product$ConfigurationChanged" = product
    # broker events
    "it.warda.seecommerce.domain.extension.Broker$AggregateIdAdded" = broker
    "it.warda.seecommerce.domain.extension.Broker$AggregateIdRemoved" = broker
    # staging area events
    "it.warda.seecommerce.domain.extension.StagingArea$AddedStagingAreaMediaContent" = stagingArea
    "it.warda.seecommerce.domain.extension.StagingArea$AddedStagingAreaMediaContentRendition" = stagingArea
    "it.warda.seecommerce.domain.extension.StagingArea$DeletedStagingAreaMediaContent" = stagingArea
    "it.warda.seecommerce.domain.extension.StagingArea$ConfiguredProductBusinessKeys" = stagingArea
    "it.warda.seecommerce.domain.extension.StagingArea$SentMediaContent" = stagingArea

    # at least once delivery proto event messages
    "it.warda.seecommerce.proto.MessageConfirmedMessage" = guaranteedDelivery
    "it.warda.seecommerce.proto.MessageSentAddAggregateIdMessage" = guaranteedDelivery
    "it.warda.seecommerce.proto.MessageSentRemoveAggregateIdMessage" = guaranteedDelivery
    "it.warda.seecommerce.proto.MessageSentChangeConfigurationMessage" = guaranteedDelivery
    "it.warda.seecommerce.proto.MessageSentChangeTenantConfigurationMessage" = guaranteedDelivery
    "it.warda.seecommerce.proto.MessageSentConfigureProductBusinessKeysMessage" = guaranteedDelivery
    "it.warda.seecommerce.proto.MessageSentSyncMediaContentMessage" = guaranteedDelivery

    #  configuration proto event messages
    "it.warda.seecommerce.proto.ConfigurationCreatedMessage" = configuration
    "it.warda.seecommerce.proto.NameUpdatedMessage" = configuration
    "it.warda.seecommerce.proto.TermsModifiedMessage" = configuration
    "it.warda.seecommerce.proto.AttributesModifiedMessage" = configuration
    "it.warda.seecommerce.proto.RulesModifiedMessage" = configuration
    "it.warda.seecommerce.proto.CatalogCreatedMessage" = configuration
    "it.warda.seecommerce.proto.CatalogLanguagesModifiedMessage" = configuration
    "it.warda.seecommerce.proto.CatalogAlteredMessage" = configuration
    "it.warda.seecommerce.proto.BusinessKeysModifiedMessage" = configuration
    #  product proto event messages
    "it.warda.seecommerce.proto.ProductDetailsDisabledMessage" = product
    "it.warda.seecommerce.proto.DataUpsertedMessage" = product
    "it.warda.seecommerce.proto.MediaContentUpsertedMessage" = product
    "it.warda.seecommerce.proto.MediaContentDeletedMessage" = product
    "it.warda.seecommerce.proto.ApprovalAddedMessage" = product
    "it.warda.seecommerce.proto.ApprovalDeletedMessage" = product
    "it.warda.seecommerce.proto.ReadyForPublicationAddedMessage" = product
    "it.warda.seecommerce.proto.ConfirmedPublicationAddedMessage" = product
    "it.warda.seecommerce.proto.ConfigurationChangedMessage" = product
    # broker events
    "it.warda.seecommerce.proto.AggregateIdAddedMessage" = broker
    "it.warda.seecommerce.proto.AggregateIdRemovedMessage" = broker
    # staging area events
    "it.warda.seecommerce.proto.StagingAreaAddedMediaContentMessage" = stagingArea
    "it.warda.seecommerce.proto.StagingAreaAddedMediaContentRenditionMessage" = stagingArea
    "it.warda.seecommerce.proto.DeletedStagingAreaMediaContentMessage" = stagingArea
    "it.warda.seecommerce.proto.ConfiguredProductBusinessKeysMessage" = stagingArea
    "it.warda.seecommerce.proto.SentMediaContentMessage" = stagingArea
  }

  # Number of retries before giving up connecting to the cluster
  connect-retries = 20
  # Delay between connection retries
  connect-retry-delay = 5s
  # Replication factor to use when creating a keyspace. Is only used when replication-strategy is SimpleStrategy.
  replication-factor = 1
  # Write consistency level
  write-consistency = "ONE"
  # Read consistency level
  read-consistency = "ONE"

  events-by-tag {
    # Tagged events are written to a separate Cassandra table in unlogged batches
    # Max size of these batches. The best value for this will depend on the size of
    # the serialized events. Cassandra logs a warning for batches above a certain
    # size and this should be reduced if that warning is seen.
    max-message-batch-size = 50
  }
}

cassandra-query-journal {
  refresh-interval = 100ms
}

cassandra-snapshot-store {
  # Comma-separated list of contact points in the cluster.
  contact-points = ["ec2-34-247-62-168.eu-west-1.compute.amazonaws.com"]
  port = 9042

  keyspace = ${env}"_"${service}"_akka_snapshot"

  # Number of retries before giving up connecting to the cluster
  connect-retries = 20
  # Delay between connection retries
  connect-retry-delay = 5s

  # Replication factor to use when creating a keyspace. Is only used when replication-strategy is SimpleStrategy.
  replication-factor = 3
  # Write consistency level
  write-consistency = "QUORUM"
  # Read consistency level
  read-consistency = "QUORUM"
}
